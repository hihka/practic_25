# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test_system.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import json

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(900, 500)

        self.questions = []
        self.current_question_index = -1
        self.user_answers = []
        self.user_name = ""
        self.correct_answers_count = 0
        self.wrong_answers_count = 0

        self.verticalLayoutWidget = QtWidgets.QWidget(Form)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(20, 100, 301, 121))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.btn_upl_test = QtWidgets.QPushButton(Form)
        self.btn_upl_test.setGeometry(QtCore.QRect(340, 20, 101, 34))
        self.btn_upl_test.setObjectName("btn_upl_test")
        self.btn_start_test = QtWidgets.QPushButton(Form)
        self.btn_start_test.setGeometry(QtCore.QRect(460, 20, 101, 34))
        self.btn_start_test.setObjectName("btn_start_test")
        self.btn_start_test.setEnabled(False)
        self.label_q = QtWidgets.QLabel(Form)
        self.label_q.setGeometry(QtCore.QRect(20, 60, 871, 31))
        self.label_q.setObjectName("label_q")
        self.radio_group = QtWidgets.QButtonGroup()
        self.radio_buttons = []
        for i in range(4):
            radio_button = QtWidgets.QRadioButton(f"Вариант {i + 1}")
            self.radio_group.addButton(radio_button)
            self.radio_buttons.append(radio_button)
            self.verticalLayout.addWidget(radio_button)
        self.btn_otvet = QtWidgets.QPushButton(Form)
        self.btn_otvet.setGeometry(QtCore.QRect(7, 240, 890, 34))
        self.btn_otvet.setObjectName("btn_otvet")
        self.btn_otvet.setEnabled(False)
        self.btn_finish_test = QtWidgets.QPushButton(Form)
        self.btn_finish_test.setGeometry(QtCore.QRect(7, 280, 890, 34))
        self.btn_finish_test.setObjectName("btn_finish_test")
        self.btn_finish_test.setEnabled(False)
        self.label_stat = QtWidgets.QLabel(Form)
        self.label_stat.setGeometry(QtCore.QRect(7, 317, 821, 181))
        self.label_stat.setText("")
        self.label_stat.setObjectName("label")


        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.add_func()

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Тест система"))
        self.btn_upl_test.setText(_translate("Form", "Загрузить тест"))
        self.btn_start_test.setText(_translate("Form", "Начать тест"))
        self.label_q.setText(_translate("Form", "Вопрос появится здесь"))
        self.btn_otvet.setText(_translate("Form", "Ответить"))
        self.btn_finish_test.setText(_translate("Form", "Завершить тестирование"))

    def add_func(self):
        self.btn_upl_test.clicked.connect(self.load_test)
        self.btn_start_test.clicked.connect(self.start_test)
        self.btn_otvet.clicked.connect(self.submit_answer)
        self.btn_finish_test.clicked.connect(self.finish_test)

    def load_test(self):
        file_name, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Выберите файл с тестом", "", "JSON Files (*.json)")
        if file_name:
            try:
                with open(file_name, "r", encoding="utf-8") as file:
                    self.questions = json.load(file)
                self.label_stat.setText(f"Всего загружено вопросов: {len(self.questions)}")
                self.btn_start_test.setEnabled(True)
            except Exception as e:
                QtWidgets.QMessageBox.critical(self, "Ошибка", f"Не удалось загрузить файл: {e}")
    
    def start_test(self):
        dialog = QtWidgets.QDialog()
        dialog.setWindowTitle("Введите имя")
        dialog_layout = QtWidgets.QVBoxLayout(dialog)
        name_label = QtWidgets.QLabel("Введите ваше имя:")
        name_input = QtWidgets.QLineEdit()
        ok_button = QtWidgets.QPushButton("OK")
        dialog_layout.addWidget(name_label)
        dialog_layout.addWidget(name_input)
        dialog_layout.addWidget(ok_button)

        def on_ok():
            self.user_name = name_input.text().strip()
            if self.user_name:
                dialog.accept()
            else:
                QtWidgets.QMessageBox.warning(self, "Ошибка", "Имя не может быть пустым!")

        ok_button.clicked.connect(on_ok)
        dialog.exec_()

        if self.user_name:
            self.btn_upl_test.setEnabled(False)
            self.btn_start_test.setEnabled(False)
            self.btn_otvet.setEnabled(True)
            self.btn_finish_test.setEnabled(True)
            self.current_question_index = 0
            self.user_answers = []
            self.correct_answers_count = 0
            self.wrong_answers_count = 0
            self.show_question()

    def show_question(self):
        if self.current_question_index < len(self.questions):
            question = self.questions[self.current_question_index]
            self.label_q.setText(question["question"])
            for i, key in enumerate(["ans_1", "ans_2", "ans_3", "ans_4"]):
                self.radio_buttons[i].setText(question[key])
                self.radio_buttons[i].setChecked(False)
        else:
            self.finish_test()

    def submit_answer(self):
        selected_button = self.radio_group.checkedButton()
        if not selected_button:
            QtWidgets.QMessageBox.warning(None, "Ошибка", "Выберите вариант ответа!")
            return

        user_answer = selected_button.text()
        correct_answer_key = self.questions[self.current_question_index]["correct_answer"]
        correct_answer = self.questions[self.current_question_index][correct_answer_key]

        if user_answer == correct_answer:
            self.correct_answers_count += 1
        else:
            self.wrong_answers_count += 1
            QtWidgets.QMessageBox.information(None, "Ответ неверный", f"Правильный ответ: {correct_answer}")

        self.user_answers.append({
            "question": self.questions[self.current_question_index]["question"],
            "user_answer": user_answer,
            "correct_answer": correct_answer
        })

        self.current_question_index += 1
        self.show_question()

    def finish_test(self):
        for i in range(self.current_question_index, len(self.questions)):
            self.user_answers.append({
                "question": self.questions[i]["question"],
                "user_answer": "",
                "correct_answer": self.questions[i][self.questions[i]["correct_answer"]]
            })

        results = {
            "user_answers": self.user_answers,
            "user_name": self.user_name,
            "count_questions": len(self.questions),
            "count_correct_answers": self.correct_answers_count,
            "count_wrong_answers": self.wrong_answers_count,
            "count_skipped_answers": len(self.questions) - self.current_question_index
        }
        file_name = f"answers_{self.user_name}.json"
        with open(file_name, "w", encoding="utf-8") as file:
            json.dump(results, file, ensure_ascii=False, indent=4)

        self.label_stat.setText(
            f"Результаты теста: \n\nВсего вопросов: {len(self.questions)}, \n"
            f"Правильных ответов: {self.correct_answers_count}, \n"
            f"Неправильных ответов: {self.wrong_answers_count}"
        )

        self.btn_upl_test.setEnabled(True)
        self.btn_start_test.setEnabled(False)
        self.btn_otvet.setEnabled(False)
        self.btn_finish_test.setEnabled(False)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
